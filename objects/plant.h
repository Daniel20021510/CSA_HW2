//
// Created by Даниил Лесь on 09.01.2022.
//

#ifndef CSA_HW2_PLANT_H
#define CSA_HW2_PLANT_H


#include <cstdio>

/*
 * Абстрактный класс растения.
 * enum используется для более очевидного создания растений при чтении их из файла
 */
class plant {
public:
    enum plant_type {
        TREE = 1,
        BUSH = 2,
        FLOWER = 3,
    };

    char* name;

    // ДЕСТРУКТОР
    virtual ~plant() = default;

    /*
     * Чтение имени растения из входного файла.
     * В классах, описывающих растение вызывается вначале этот метод, потом метод конкретного растения.
     * @param: input_file - указатель на входной файл
     * @returns: 1 - если при чтении произошла ошибка, 0 - ОК.
    */
    virtual int ReadInput(FILE* input_file);

    /*
     * Вывод полей растения в выходной файл.
     * @param: output_file - указатель на входной файл
    */
    virtual void Out(FILE* output_file) = 0;

    /*
     * Генерация рандомных полей растения для записи в контейнер.
     * Не было смысла реализовывать здесь (в базовом классе растения) рандомное заполнение имени
     *  т.к. получится абстракция ради абстракции.
     */
    virtual void RandomInput() = 0;

    /*
     * Считать тип растения.
     * Т.к. мы получаем тип растения из входных данных, мы не можем создать конкретное растение в конструктору,
     *  т.к. мы не можем выбрать конструктор до тех пор, пока не считаем тип.
     * @param: input_file - дескриптор файла, открытого на чтение.
     * @returns: ссылку на plant - ОК. NULL - ошибка.
     */
    static plant* CreatePlant(FILE* input_file);

    /*
     * Частное от деления числа гласных букв в названии на общую длину названия
     * @returns: (double) Частное от деления числа гласных букв в названии на общую длину названия
     */
    double VowelsPerSize();

};


#endif //CSA_HW2_PLANT_H
